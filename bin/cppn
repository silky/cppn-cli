#!/usr/bin/env python

# "jq" hacking to make a large json file
# with all the data:
#
#  1. for i in *.png.json; do jq '. + {"from_file": input_filename}' $i > $i-2.json; done;
#  2. jq -s '[.[]]' *-2.json > all.json                                                   

import cppn.model as model
import cppn.ops   as ops
from cppn import cppn

import click
import numpy as np
import pickle
import scipy.misc as sp
import json


@click.group()
@click.pass_context
def cli(ctx):
    ...


@cli.group()
@click.pass_context
def existing(ctx):
    ...


@cli.group()
@click.pass_context
@click.option("--net_size", type=int)
@click.option("--z_dim", type=int)
@click.option("--activations", type=str)
@click.option("--norms",   default=None, type=str)
@click.option("--colours", default=3)
@click.option("--out", type=str)
@click.option("--server", type=str, default=None)
def new(ctx, net_size, z_dim, activations, norms, colours, out, server):
    activations = [ ops.AFM[f] for f in activations.split(',') ]
    norms       = norms.split(',') if norms else []

    config  = model.Config( net_size    = net_size
                      , input_size  = 2 + len(norms) + z_dim
                      , z_dim       = z_dim
                      , activations = activations
                      , colours     = colours
                      , norms       = norms
                      )

    ctx.obj["config"] = config
    ctx.obj["out"]    = out
    ctx.obj["server"] = server



@existing.command()
@click.pass_context
@click.option("--checkpoint_dir", type=str, required=True)
@click.option("--server", type=str, default=None)
@click.option("--image", help="Path of the image we're attempting to match.", 
        required=True)
@click.option("--steps",  default=4000)
@click.option("--base_logdir", default="logs")
@click.option("--log_every", default=500)
@click.option("--lr", default=0.001)
def keep_training(ctx, checkpoint_dir, server, image, steps, base_logdir, log_every, lr):
    """ Continue training some existing model.
    
        This will use the configuration data from the checkpoint directory.
    """
    with open(f"{checkpoint_dir}/config.pkl", "rb") as f:
        config_data = pickle.load(f)

    z = config_data["z"]

    n.callback(**config_data["params"])
     
    config = ctx.obj["config"]

    cppn.train_matching(ctx, image, z, server, config, lr, steps, log_every, base_logdir, checkpoint_dir)



@existing.command()
@click.pass_context
@click.option("--checkpoint_dir", type=str, required=True)
@click.option("--height",  required=True, type=int)
@click.option("--width",   required=True, type=int)
@click.option("--server",  type=str, default=None)
@click.option("--out",     type=str, required=True)
@click.option("--z",       type=str, default=None)
@click.option("--z_steps", type=int, default=0)
def sample(ctx, checkpoint_dir, height, width, server, out, z, z_steps):
    """ Sample an image from an existing model.
    """
    with open(f"{checkpoint_dir}/config.pkl", "rb") as f:
        config_data = pickle.load(f)

    new.callback(**config_data["params"])
     
    cppn.sample(ctx.obj["config"], checkpoint_dir, height, width, server, out, z, z_steps)



@new.command()
@click.pass_context
@click.option("--height", required=True, type=int)
@click.option("--width",  required=True, type=int)
@click.option("--z",      type=str)
def generate(ctx, height, width, z):
    """ Just randomly generate a CPPN-style image.
    """
    config = ctx.obj["config"]
    out    = ctx.obj["out"]
    server = ctx.obj["server"]

    if z is not None:
        z = np.array( [ float(n) for n in z.split(',') ] )
    else:
        z = np.random.normal(-1, 1, size=config.z_dim)

    cppn.generate(z, height, width, config, out, server)



@new.command()
@click.option("--image", help="Path of the image we're attempting to match.",
        required=True)
@click.option("--steps",  default=4000)
@click.option("--base_logdir", default="logs")
@click.option("--log_every", default=500)
@click.option("--lr", default=0.001)
@click.option("--sample_after", default=True)
@click.pass_context
def match(ctx, image, steps, base_logdir, log_every, lr, sample_after):
    """ Train a model to match a given image.
    """
    config = ctx.obj["config"]
    server = ctx.obj["server"]

    z = np.random.normal(-1, 1, size=config.z_dim)

    checkpoint_dir = cppn.train_matching(ctx, image, z, server, config, lr, steps, log_every, base_logdir)

    if sample_after:
        loaded           = sp.imread(image, mode="RGB")
        height, width, _ = loaded.shape

        out = ctx.obj["out"]

        cppn.sample(config, checkpoint_dir, height, width, server, out, z, 0)



if __name__ == "__main__":
    cli(obj={})
